{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Sofia documentation Welcome to sofia, a simple app for learning new things through simple lessons. Installation To use sofia you must first clone the repository from GitHub: git clone https://github.com/qasterr/sofia cd sofia Then activate a virtual environment: python3 -m venv venv source ./venv/bin/activate Finally, install all the required packages: pip3 install -r requirements.txt Usage Once the installation is complete, you can run sofia by running the following command: make run","title":"Home"},{"location":"#sofia-documentation","text":"Welcome to sofia, a simple app for learning new things through simple lessons.","title":"Sofia documentation"},{"location":"#installation","text":"To use sofia you must first clone the repository from GitHub: git clone https://github.com/qasterr/sofia cd sofia Then activate a virtual environment: python3 -m venv venv source ./venv/bin/activate Finally, install all the required packages: pip3 install -r requirements.txt","title":"Installation"},{"location":"#usage","text":"Once the installation is complete, you can run sofia by running the following command: make run","title":"Usage"},{"location":"courses/","text":"Courses Sofia is ordered in courses, which contain lessons. These can be made by you or downloaded from the internet. Here's a guide on how to do this: WARNING: Downloaded courses can serve malicious HTML and JavaScript. Be careful with what you download! Folder structure To be recognized as a valid course, the course must be located in ./courses . It must contain also a course.json file to indicate information about the course. courses/ \u251c\u2500 course_name/ \u2502 \u251c\u2500 course.json course.json A course.json should have the following keys: name , description , icon , author , version . Example course.json file { \"name\": \"Lorem Ipsum\", \"description\": \"Dolor sit amet.\", \"icon\": \"\ud83d\udcdc\", \"author\": \"John Doe\", \"version\": \"1.0.0\" } Obviously courses are useless if they don't have content, this can be done via two ways: Single markdown file The most basic way to make a lesson is by making a markdown file. To do this, add a .md file in the course directory. touch 01-single-file.md To be valid they have to have a header with info. This can be done by adding --- before the content. Before that are the headers. These are written in YAML. To be valid it must contain the following keys: name - The name of the lesson. This will be displayed in the lessons list. description - A short description of the contents of the lesson. icon - An emoji which stands for the lesson. Optional values: css - An array of links to custom css files. These can be from third-parties or be held into the course directory. To do so just add the folling entry to the css: \"/courses/<course_name>/style.css\" . More than one css file can be added. Example file name: Lorem Ipsum description: Dolor sit amet. icon: \ud83d\udcdc --- # Lorem Ipsum Dolor sit amen Folder For long lessons, it is better to make a folder whose contents will be merged together. To do this make a folder in the course directory and add a lesson.json lesson.json files should contain the same contents the header but in JSON format. Because of some weird bug, ADD AN EMPTY LINE AT THE END EACH FILE . Else the spacing between each file gets messed up. Example lesson.json file { \"name\": \"Lorem Ipsum\", \"description\": \"Dolor sit amet.\", \"icon\": \"\ud83d\udcdc\" } This will be the header values for the whole lesson, so DO NOT PUT HEADERS IN THE MARKDOWN FILES . Folder architecture courses/ \u251c\u2500 course_name/ \u2502 \u251c\u2500 01-lesson/ \u2502 \u2502 \u251c\u2500 01-lorem.md \u2502 \u2502 \u251c\u2500 02-ipsum.md \u2502 \u2502 \u251c\u2500 lesson.json Final lesson structure A complete lesson should look like this: courses/ \u251c\u2500 course_name/ \u2502 \u251c\u2500 01-lesson/ \u2502 \u2502 \u251c\u2500 01-file.md \u2502 \u2502 \u251c\u2500 02-file.md \u2502 \u2502 \u251c\u2500 lesson.json \u2502 \u251c\u2500 02-lesson.md \u2502 \u251c\u2500 course.json","title":"Courses"},{"location":"courses/#courses","text":"Sofia is ordered in courses, which contain lessons. These can be made by you or downloaded from the internet. Here's a guide on how to do this: WARNING: Downloaded courses can serve malicious HTML and JavaScript. Be careful with what you download!","title":"Courses"},{"location":"courses/#folder-structure","text":"To be recognized as a valid course, the course must be located in ./courses . It must contain also a course.json file to indicate information about the course. courses/ \u251c\u2500 course_name/ \u2502 \u251c\u2500 course.json","title":"Folder structure"},{"location":"courses/#coursejson","text":"A course.json should have the following keys: name , description , icon , author , version .","title":"course.json"},{"location":"courses/#example-coursejson-file","text":"{ \"name\": \"Lorem Ipsum\", \"description\": \"Dolor sit amet.\", \"icon\": \"\ud83d\udcdc\", \"author\": \"John Doe\", \"version\": \"1.0.0\" } Obviously courses are useless if they don't have content, this can be done via two ways:","title":"Example course.json file"},{"location":"courses/#single-markdown-file","text":"The most basic way to make a lesson is by making a markdown file. To do this, add a .md file in the course directory. touch 01-single-file.md To be valid they have to have a header with info. This can be done by adding --- before the content. Before that are the headers. These are written in YAML. To be valid it must contain the following keys: name - The name of the lesson. This will be displayed in the lessons list. description - A short description of the contents of the lesson. icon - An emoji which stands for the lesson. Optional values: css - An array of links to custom css files. These can be from third-parties or be held into the course directory. To do so just add the folling entry to the css: \"/courses/<course_name>/style.css\" . More than one css file can be added.","title":"Single markdown file"},{"location":"courses/#example-file","text":"name: Lorem Ipsum description: Dolor sit amet. icon: \ud83d\udcdc --- # Lorem Ipsum Dolor sit amen","title":"Example file"},{"location":"courses/#folder","text":"For long lessons, it is better to make a folder whose contents will be merged together. To do this make a folder in the course directory and add a lesson.json lesson.json files should contain the same contents the header but in JSON format. Because of some weird bug, ADD AN EMPTY LINE AT THE END EACH FILE . Else the spacing between each file gets messed up.","title":"Folder"},{"location":"courses/#example-lessonjson-file","text":"{ \"name\": \"Lorem Ipsum\", \"description\": \"Dolor sit amet.\", \"icon\": \"\ud83d\udcdc\" } This will be the header values for the whole lesson, so DO NOT PUT HEADERS IN THE MARKDOWN FILES .","title":"Example lesson.json file"},{"location":"courses/#folder-architecture","text":"courses/ \u251c\u2500 course_name/ \u2502 \u251c\u2500 01-lesson/ \u2502 \u2502 \u251c\u2500 01-lorem.md \u2502 \u2502 \u251c\u2500 02-ipsum.md \u2502 \u2502 \u251c\u2500 lesson.json","title":"Folder architecture"},{"location":"courses/#final-lesson-structure","text":"A complete lesson should look like this: courses/ \u251c\u2500 course_name/ \u2502 \u251c\u2500 01-lesson/ \u2502 \u2502 \u251c\u2500 01-file.md \u2502 \u2502 \u251c\u2500 02-file.md \u2502 \u2502 \u251c\u2500 lesson.json \u2502 \u251c\u2500 02-lesson.md \u2502 \u251c\u2500 course.json","title":"Final lesson structure"},{"location":"dependencies/","text":"Dependencies sofia is built on open source software and libraries. Here is a list of them and their according licenses: Flask - BSD 3-Clause License markdown - Custom License pyyaml - MIT License Python and Python standard libraries - Custom License","title":"Dependencies"},{"location":"dependencies/#dependencies","text":"sofia is built on open source software and libraries. Here is a list of them and their according licenses: Flask - BSD 3-Clause License markdown - Custom License pyyaml - MIT License Python and Python standard libraries - Custom License","title":"Dependencies"}]}